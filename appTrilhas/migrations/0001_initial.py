# Generated by Django 2.2 on 2019-06-18 03:39

import appTrilhas.models
from django.conf import settings
import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import imagekit.models.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('matricula', models.CharField(max_length=10, unique=True)),
                ('ativo', models.BooleanField(default=False)),
                ('username', models.CharField(blank=True, max_length=10)),
                ('email', models.EmailField(max_length=70, unique=True)),
                ('name', models.CharField(max_length=130)),
                ('data_nascimento', models.DateField(null=True)),
                ('genero', models.CharField(choices=[('F', 'Feminino'), ('M', 'Masculino'), ('O', 'Outros')], max_length=15)),
                ('role', models.CharField(choices=[('Administrador', 'Administrador'), ('Estudante', 'Estudante'), ('Moderador', 'Moderador')], default='Estudante', max_length=20)),
                ('imagem', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='usuarios')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Convite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=130)),
                ('email', models.EmailField(max_length=70, unique=True)),
                ('enviado', models.BooleanField(default=False)),
                ('ativo', models.BooleanField(default=True)),
                ('token', models.CharField(default=appTrilhas.models.Convite.generate_token, max_length=40, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Curso',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=128)),
                ('carga_horaria', models.IntegerField(default=0, null=True)),
                ('esta_concluido', models.BooleanField(default=False)),
                ('descricao', models.TextField(blank=True, max_length=300, null=True)),
                ('progresso', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='LinkCurso',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=128)),
                ('link', models.URLField(null=True)),
                ('carga_horaria', models.IntegerField(default=0, null=True)),
                ('esta_concluido', models.BooleanField(default=False)),
                ('curso', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appTrilhas.Curso')),
            ],
        ),
        migrations.CreateModel(
            name='Trilha',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=128)),
                ('data_de_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Criado em')),
                ('data_de_conclusao', models.DateTimeField(auto_now_add=True, verbose_name='Concluido em')),
                ('data_de_inicio', models.DateTimeField(null=True)),
                ('esta_concluido', models.BooleanField(default=False)),
                ('carga_horaria', models.IntegerField(default=0, null=True)),
                ('imagem', imagekit.models.fields.ProcessedImageField(upload_to='trilhas')),
                ('descricao', models.TextField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User_Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('certificado', models.FileField(blank=True, null=True, upload_to='certificados')),
                ('data_upload', models.DateTimeField(auto_now_add=True, verbose_name='Data do upload')),
                ('cursoLink', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_link', to='appTrilhas.LinkCurso')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_link', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Trilha_User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progresso', models.FloatField(default=0)),
                ('trilha', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trilha_user', to='appTrilhas.Trilha')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='trilha_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='curso',
            name='trilha',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='appTrilhas.Trilha'),
        ),
        migrations.AddField(
            model_name='user',
            name='cursoLink',
            field=models.ManyToManyField(related_name='users', through='appTrilhas.User_Link', to='appTrilhas.LinkCurso'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='trilha',
            field=models.ManyToManyField(to='appTrilhas.Trilha'),
        ),
        migrations.AddField(
            model_name='user',
            name='trilhaProgresso',
            field=models.ManyToManyField(related_name='users', through='appTrilhas.Trilha_User', to='appTrilhas.Trilha'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
